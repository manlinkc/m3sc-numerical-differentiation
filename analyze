ANALYZE

To compare the simulation results for the two different cases A: alpha = 1-2i, beta = 1+2i and case B: alpha =1-i, beta = 1+2i, I focused my investigation on the most energetic wavenumbers.  From the notes in lecture 16 we know that the amplitude of a Fourier coefficient describes the ‘energy’ at a particular frequency.  Figure 1 is a plot of the energy over different wavenumbers for case A in orange and case B in green.  To produce this plot, I have created a new function called modified_nwave which has the same functionality as the nwave function with the only difference that it takes in g0 as an input. I have decided to create this function so I can directly compare simulation results for case A and case B based on the same initial conditions.  Figure 1 shows that for both case A and case B, the amplitudes of the Fourier coefficients are centred around zero and there are more spikes in energy when the wavenumber gets closer to 0. 

From looking at figure 1, both case A and case B seem to peak with similar amplitudes. I have decided to further the investigation by focusing on the most energetic wavenumbers. To do so, I have found the maximum amplitude reached by the Fourier coefficients in case A and in case B. I have used these values to create a threshold which is 0.75*min(max(cn_A),max(cn_B)).  For any Fourier coefficient lower than this frequency I have set the coefficient to 0, this acts as a filter where only the contributions of the most energetic wavenumbers are left behind. Figure 2 is a plot of the amplitude of the Fourier coefficients for the most energetic wavenumbers for both Case A and Case B with the threshold as given in the title. This plot shows that for both case A and case B the highest frequencies are focused around 0 and the range of amplitudes reached is around 60 – 80. The figure also shows that Case B has more energetic wavenumbers above the threshold than case A.

Figure 3 is a semilog plot of the power spectral density against the frequency for case A for 6 different x values between 0 and 250.  Figure 4 is a semilog plot of the power spectral density against the frequency for case B for 6 different x values between 0 and 250. We are given that the signal is periodic in the x-plane as a hann windowing signal is applied. However, in general there is no reason to expect that signal is periodic in the t-plane. I have used windowing to account for this, in particular I have used scipy.signal.welch to use Welch’s method and this also makes it clearer to analyse certain characteristics of the signal. I have used Welch’s method to produce a plot of the power spectral density. Both figure 3 and figure 4 show that for each x value the power spectral density increases to a maximum at a frequency just smaller than 0 and then gradually decreases to a minimum before spiking upwards against as frequency reaches around 2.0. Within my code I have outputted the frequency (fmin) that corresponds to the minimum power spectral density and the frequency (fmax) that corresponds to the maximum power spectral density. For case A the most energetic frequency/ fmax = -0.8251953125  and fmin = 1.25416992188 and for case B the most energetic frequency/ fmax = -0.2503125. and fmin =1.7834765625. From the notes in lecture 16 we need T >> 1/fmax to ensure the slow components are contained within the signal. In this case, we need T to be greater than approximately 5. Throughout my investigation, this inequality has been satisfied and I have set T=200 in both cases. Another inequality from the notes is that we need delta t < 2/fmin to resolve the highest frequency components. In this case we need delta t to be smaller than approximately 1.6 and in my code this inequality has been satisfied as delta t is 100/256=0.390625.
From lecture 16 notes we know that abs(c_n)**2 is the energy spectral density. Intuitively, we can describe the sum of the energy spectral density across all n values as the ‘total energy’. Figure 5 is a plot of the total energy at each time point with t<50 discarded. Figure 5 shows that both case A and case B have stable total energy that stays between a range of values. However, case B has a higher total energy meaning that case B has more energy in the system.
To measure if/to what degree each case is chaotic I have decided to use the Lyapunov exponents as a way of measuring the sensitivity of each case to initial conditions. To do this I have first run the simulation from arbitrary initial condition up to t=50 (the initial transience) and took the solution to be the initial condition. I then used this initial condition as an input into my modified_nwave function to obtain an output. I then repeated this step using a perturbed initial condition where I added 1**10-6 to on of the entries in the initial condition. I then computed the distance between the two solutions and plotted this on a semilog scale. Figure 6 is a plot of the distance squared between the two solutions against the time in seconds for case A. Figure 7 is a plot of the distance squared between the two solutions against the time in seconds for case B. In a chaotic system we expect there to be some sensitivity to initial condition. With the plots in figure 6 and figure 7 if the system is chaotic this distance will increase exponentially. The rate of the exponential growth is the Lyaponov exponent and I have used these plots to estimate the Lyapunov exponent using least-squares fit.  Figure 6 shows that the slope is 0.588813260269 so the Lyapunov exponent is 0.29 (2dp) for case A, figure 7 shows that the slope is 0.404224781031 so the Lyapunov exponent is 0.20 (2dp) for case B. This analysis indicates that although the Lyaponuv exponents are fairly close, case A is more chaotic than case B.


WAVE DIFF
To investigate whether the compact finite difference method is superior to Fourier differentiation for non-linear waves I have considered the simulation results for case B at t=100.  In my implementation of the finite difference method I have used the banded matrix to make the scheme more efficient so it requires less memory and less operations.
I have first considered efficiency in terms of runtime. The variable Nx which is the number of x values in the grid is common to both the finite difference method and to the Fourier differentiation method. Figure 8 is a plot of the run time of each method as Nx is increased. The plot clearly shows that for the range of Nx values chosen the discrete fourier transform is a lot faster than the finite difference method.  Interestingly as Nx increases the runtime for the discrete fourier transform increases but at a much slower rate compared to the finite difference. From this figure it seems as though the runtime for the finite difference method increases as Nx increase but at a much larger rate as Nx increases (perhaps exponentially). Using the notes form lecture 16 we c
I have next considered the accuracy of both methods. Figure 9, Figure 10, Figure 11 and Figure 12 each show the derivative output from the Finite difference method and from the Discrete Fourier Transform in comparison to an estimate of the exact derivate for different values of Nx. These plots show how the number of grid points (Nx) affect the accuracy of the method. Figure 9 shows this plot for Nx =32,  in this plot neither method is very accurate. As Nx increases to Nx = 64 both methods seem to do better at fitting the exact derivative. However it’s interesting to note that the finite difference method dgdx deviates at the end point whereas the discrete fourier transform dgdx follows the correct shape. Again as Nx increases to Nx =128 both methods better approximate the exact solution and there is much less deviation at the end points for the finite difference method. Finally as Nx =256 both methods perfectly match the exact solution. Overall these plots show that the finite difference method takes longer to converge to the exact solution at the end points.
Overall although Figure 9 shows that the finite difference method takes longer to run than the discrete fourier transform method, it is still important to note that the finite difference method is still very competitive with respect to runtime. Another advantage of the finite difference scheme is that it uses less memory than the fourier method making it more memory efficient. However, a weakness of the finite difference method is that it is difficult to apply to complex geometries. Overall my conclusion is that the compact finite difference method is superior compared to the discrete fourier transform given it’s competitive efficiency and it’s advantages in memory efficiency and it’s comparative simplicity compared to the spectral method.
